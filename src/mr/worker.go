package mr

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"sort"
	"time"
)
import "log"
import "net/rpc"
import "hash/fnv"

// Map functions return a slice of KeyValue.
type KeyValue struct {
	Key   string
	Value string
}

// use ihash(key) % NReduce to choose the reduce
// task number for each KeyValue emitted by Map.
func ihash(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32() & 0x7fffffff)
}

// main/mrworker.go calls this function.
func Worker(mapf func(string, string) []KeyValue,
	reducef func(string, []string) string) {

	workerID := os.Getpid()

	for {
		taskRequest := TaskRequest{WorkerID: workerID}
		taskResponse := TaskResponse{}

		ok := call("Coordinator.AssignTask", &taskRequest, &taskResponse)
		if !ok || taskResponse.TaskType == "exit" {
			return
		}

		switch taskResponse.TaskType {
		case "map":
			handleMapTask(mapf, taskResponse)
		case "reduce":
			handleReduceTask(reducef, taskResponse)
		case "wait":
			time.Sleep(time.Second)
		}

		reportRequest := ReportRequest{
			WorkerID: workerID,
			TaskType: taskResponse.TaskType,
			TaskID:   taskResponse.TaskID,
		}
		reportResponse := ReportResponse{}
		call("Coordinator.ReportTask", &reportRequest, &reportResponse)
	}

	// Your worker implementation here.
}

// Map Process: Content -> Intermediate File
// mapf(string) -> []kv -> [n]json([]kv)
func handleMapTask(mapf func(string, string) []KeyValue, task TaskResponse) {
	log.Printf("Handle Task. Task type: %s, task id: %s", task.TaskType, task.TaskID)
	file, err := os.Open(task.FileName)
	if err != nil {
		log.Fatalf("cannot open %v", task.FileName)
	}
	content, err := io.ReadAll(file)
	if err != nil {
		log.Fatalf("cannot read %v", task.FileName)
	}
	file.Close()
	// Calls the map function to get intermediate key-value pairs.
	kva := mapf(task.FileName, string(content))
	// Creates buckets for intermediate key-value pairs.
	buckets := make([][]KeyValue, task.NReduce)
	// Distributes key-value pairs into buckets based on the hash of the key.
	for _, kv := range kva {
		bucket := ihash(kv.Key) % task.NReduce
		buckets[bucket] = append(buckets[bucket], kv)
	}
	// Creates intermediate files for each reduce task.
	for i := 0; i < task.NReduce; i++ {
		// Generates the file name for the intermediate file.
		oname := fmt.Sprintf("mr-%d-%d", task.TaskID, i)
		// Creates the intermediate file.
		ofile, _ := os.Create(oname)
		enc := json.NewEncoder(ofile)
		for _, kv := range buckets[i] {
			// Writes key-value pairs to the intermediate file.
			enc.Encode(&kv)
		}
		ofile.Close()
	}
}

// Intermediate Files -> Output File
// json([]kv)
func handleReduceTask(reducef func(string, []string) string, task TaskResponse) {
	log.Printf("Handle Task. Task type: %s, task id: %v", task.TaskType, task.TaskID)
	// Initializes an empty slice for intermediate key-value pairs.
	intermediate := []KeyValue{}
	// Reads intermediate files generated by map tasks.
	// json([]kv) -> []kv
	for i := 0; i < task.NMap; i++ {
		iname := fmt.Sprintf("mr-%d-%d", i, task.TaskID)
		file, err := os.Open(iname)
		if err != nil {
			log.Fatalf("cannot open %v", iname)
		}
		dec := json.NewDecoder(file)
		for {
			var kv KeyValue
			if err := dec.Decode(&kv); err != nil {
				break
			}
			intermediate = append(intermediate, kv)
		}
		file.Close()
	}

	sort.Slice(intermediate, func(i, j int) bool {
		return intermediate[i].Key < intermediate[j].Key
	})

	oname := fmt.Sprintf("mr-out-%d", task.TaskID)
	ofile, _ := os.Create(oname)

	// Processes intermediate key-value pairs, groups them by key, applies the reduce function, and writes the output to the file.
	i := 0
	for i < len(intermediate) {
		j := i + 1
		for j < len(intermediate) && intermediate[j].Key == intermediate[i].Key {
			j++
		}
		values := []string{}
		for k := i; k < j; k++ {
			values = append(values, intermediate[k].Value)
		}
		output := reducef(intermediate[i].Key, values)
		fmt.Fprintf(ofile, "%v %v\n", intermediate[i].Key, output)
		i = j
	}
	ofile.Close()
}

// send an RPC request to the coordinator, wait for the response.
// usually returns true.
// returns false if something goes wrong.
func call(rpcname string, args interface{}, reply interface{}) bool {
	// c, err := rpc.DialHTTP("tcp", "127.0.0.1"+":1234")
	sockname := coordinatorSock()
	c, err := rpc.DialHTTP("unix", sockname)
	if err != nil {
		log.Fatal("dialing:", err)
	}
	defer c.Close()

	err = c.Call(rpcname, args, reply)
	if err == nil {
		return true
	}

	fmt.Println(err)
	return false
}
